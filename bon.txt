https://www.proglobalbusinesssolutions.com/css-hover-effects/#:~:text=A%20CSS%20hover%20effect%20causes%20a%20graphical%20interface,on%20the%20web%20page%20and%20improve%20site%20interactivity

client asynchrone sous forme d'une classe simple 
import socket, threading, sys
class Client():
    def __init__(self, host, port):
        self.__host = host
        self.__port = port
        self.__sock = socket.socket()
        self.__thread = None

    # fonction de connection.
    def connect(self) -> int:
        try :
            self.__sock.connect((self.__host,self.__port))
        except ConnectionRefusedError:
            print ("serveur non lancé ou mauvaise information")
            return -1
        except ConnectionError:
            print ("erreur de connection")
            return -1
        else :
            print ("connexion réalisée")
            return 0

    """ 
        fonction qui gére le dialogue
        -> lance une thread pour la partie reception 
        -> lance une boucle pour la partie emission. arréte si kill, reset ou disconnect
    """
    def dialogue(self):
        msg = ""
        self.__thread = threading.Thread(target=self.__reception, args=[self.__sock,])
        self.__thread.start()
        while msg != "kill" and msg != "disconnect" and msg != "reset":
            msg = self.__envoi()
        self.__thread.join()
        self.__sock.close()

    # méthode d'envoi d'un message au travers la socket. Le résultat de cette methode est le message envoyé.
    def __envoi(self):
        msg = input("client: ")
        try:
            self.__sock.send(msg.encode())
        except BrokenPipeError:
            print ("erreur, socket fermée")
        return msg
    """
      thread recepction, la connection étant passée en argument
    """
    def __reception(self, conn):
        msg =""
        while msg != "kill" and msg != "disconnect" and msg != "reset":
            msg = conn.recv(1024).decode()
            print(msg)

if __name__=="__main__":
   
    print (sys.argv)
    if len(sys.argv) < 3:
      # idem code précédent

    # en dehors du if
    client.connect()
    client.dialogue()






2.......................................................................................2

code client sous forme d'un thread
import socket, threading,sys

""" 
classe Client héritant de Thread
doit implémenter la méthode run qui est immplictement appelé lorsque l'on démarre le thread à l'aide de start()
"""
class Client(threading.Thread):

    def __init__(self, host, port):
        super().__init__()
        self.__host = host
        self.__port = port
        self.__sock = socket.socket()
    #méthode de connection
    def __connect(self) -> int:
        try :
            self.__sock.connect((self.__host,self.__port))
        except ConnectionRefusedError:
            print ("serveur non lancé ou mauvaise information")
            return -1
        except ConnectionError:
            print ("erreur de connection")
            return -1
        else :
            print ("connexion réalisée")
            return 0
    # méthode de dialogue synchrone
    def __dialogue(self):
        msg = ""
        while msg != "kill" and msg != "disconnect" and msg != "reset":
            msg = input("client: ")
            self.__sock.send(msg.encode())
            msg = self.__sock.recv(1024).decode()
            print(msg)
        self.__sock.close()


    def run(self):
        if (self.__connect() ==0):
            self.__dialogue()

if __name__=="__main__":
    if len(sys.argv) < 3:
        client = Client("127.0.0.1",15001)
    else :
        host = sys.argv[1]
        port = int(sys.argv[2])
        # création de l'objet client qui est aussi un thread
        client = Client(host,port)
    #démarrage de la thread client
    client.start()
    client.join()

3............................................................................................3


import socket

def serveur():
    msg = ""
    conn = None
    server_socket = None
    while msg != "kill" :
        msg = ""
        server_socket = socket.socket()
        """ options qui permette de réutiliser l'adresse et le port rapidement"""
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
        server_socket.bind(("localhost", 15001))

        server_socket.listen(1)
        print('Serveur en attente de connexion')
        while msg != "kill" and msg != "reset":
            msg = ""
            try :
                conn, addr = server_socket.accept()
                print (addr)
            except ConnectionError:
                print ("erreur de connection")
                break
            else :
                while msg != "kill" and msg != "reset" and msg != "disconnect":
                    msg = conn.recv(1024).decode()
                    print ("Received from client: ", msg)
                    # msg = input('Enter a message to send: ')
                    """ 
                    le serveur va ici récupere les commandes du client et lui renvoyer. Dans la suite de la SAÉ, 
                    le serveur fera pareil mais en renvoyant le résultat des commandes demandées par le client.
                    """
                    conn.send(msg.encode())
                conn.close()
        print ("Connection closed")
        server_socket.close()
        print ("Server closed")

# Coder les commande ici

if __name__ == '__main__':
    serveur()

#BrokenPipeError

import socket
import  os 
import psutil
import platform
from PyQt6.QtWidgets import *
from PyQt6.QtCore import * 
import sys
from requests import Session
#on va faire un ficher pour lancer tt les serveurs en meme temps ensuite en fonction des num on pourra choisir le serveur

#connexion au serveur


"""
client_socket = socket.socket()
print("Socket créé.")
host = "localhost"
port = input("Choisissez le serveur de connexion : ")

if port == "1":
    port = 1111
elif port == "2":
    port = 10000
else:
    print("Serveur introuvable !")

client_socket.connect((host, port))
print("Connecté au serveur.")
message =input("envoi d'un message : ")
client_socket.send(message.encode())
print("Message envoyé")
"""




#interface graphique


class client(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Client")
        grid = QGridLayout()
        widget = QWidget()
        self.setCentralWidget(widget) 
        widget.setLayout(grid)
        #self.label = QTextEdit()
        

        name = 'shad' # Enter your name here!
        

        ram= QPushButton("ram")
        cpu=QPushButton("cpu")
        name=QPushButton("name")
        
        #ok#
        #aire de text ou on affiche les messages
        self.text_area = QTextEdit()
        

        self.text_area.setFocusPolicy(Qt.FocusPolicy.NoFocus)

        #zone de texte pour ecrire les messages
        message = QLineEdit()

        layout = QVBoxLayout()
        layout.addWidget(self.text_area)
        layout.addWidget(message)

        #evenement
        

        # Event handlers:
        #def display_new_messages():
            #new_message = server.get(chat_url).text
            #if new_message:
                #text_area.append(new_message)

        #def send_message():
            
            #server.post(chat_url, {'name': name, 'message': message.text()})
            #message.clear()

        # Signals:
#        message.returnPressed.connect(send_message)
        #timer = QTimer()
        #timer.timeout.connect(display_new_messages)
        

        

        


        grid.addWidget(ram, 0, 0)
        grid.addWidget(cpu , 1, 0)
        grid.addWidget(name, 2, 0)
        grid.addWidget(self.text_area, 0, 1, 3, 1)
        grid.addWidget(message, 3, 0, 1, 2)
        
    

        ram.clicked.connect(self.__actionram)
        cpu.clicked.connect(self.__actioncpu)
        name.clicked.connect(self.__actionname)
        

        #on essaye

        
        #on essaye 

#actions des boutons

    def __actionram(self):
        message = "ram"
        client_socket.send(message.encode())
        print("La requête pour la ram a été envoyée")
        data = client_socket.recv(1024).decode()
        
        print(f"Message du serveur : {data}")
        self.text_area.append(f"{data}\n")
        self.text_area.append(f"")
        QTextEdit.show(self.text_area)
        
        
   

    def __actioncpu(self):
        message = "cpu"
        client_socket.send(message.encode())
        print("La requête pour la cpu a été envoyée")
        data = client_socket.recv(1024).decode()
        print(f"Message du serveur : {data}")
        self.text_area.append(f"{data}\n")
        QTextEdit.show(self.text_area)

    def __actionname(self):
        message = "name"
        client_socket.send(message.encode())
        print("La requête pour le nom a été envoyée")
        data = client_socket.recv(1024).decode()
        print(f"Message du serveur : {data}")
        self.text_area.append(f"{data}\n")
        QTextEdit.show(self.text_area)

"""
if message == "arret" or message == "bye":
    print("Connexion terminé.")
    client_socket.close()

elif message == "ram":
    __actionram(self)
elif message == "cpu":
    __actioncpu(self)   
else:
    data = client_socket.recv(1024).decode()
    '''print("Message reçu du serveur:")
    print(data)'''
    if data == "arret":
        print("Connexion terminé.")
        client_socket.close()

    else:
        while data !="bye":
            message = input("envoi d'un message : ")
            client_socket.send(message.encode())
            print("Message envoyé")
            if message == "arret" or message == "bye":
                print("Connexion terminé.")
                client_socket.close()
                break
            data = client_socket.recv(1024).decode()
            print("Message reçu du serveur:")
            print(data)
            if data == "arret":
                print("Connexion terminé.")
                client_socket.close()
                break
"""

if __name__=="__main__":
    client_socket = socket.socket()
    print("Socket créé.")
    host = "localhost"
    port = input("Choisissez le serveur de connexion : ")

    if port == "1":
        port = 1111
    elif port == "2":
        port = 10000
    else:
        print("Serveur introuvable !")

    client_socket.connect((host, port))
    print("Connecté au serveur.")

    app = QApplication(sys.argv)
    window = client()
    window.show()
    app.exec()
